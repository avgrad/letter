* {
    box-sizing: border-box;
}

html, body {
    margin: 0;
    padding: 0;
}

/********** page setup **********/

html {
    font-size: 1cm; /* nötig für skalierung! damit 1rem == 1cm für positionierung etc in body */
    --paperwidth: 21; /* in cm */
    --paperheight: 29.7; /* in cm */
}

body {
    position: relative;
    width: calc(var(--paperwidth) * 1rem);
    height: calc(var(--paperheight) * 1rem);
    padding: 2.5rem 2rem 2rem 2.5rem;
    font-family: "Calibri", sans-serif;
    font-size: 0.423333rem; /* = 12pt */
}

@media screen {
    html {
        display: flex;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.12);
    }

    body {
        margin: 2rem auto; /**/
        background-color: white;
        box-shadow: 0 0.05rem 0.2rem gray,
                    0 0.1rem 0.5rem lightgray;
    }

    html.fit-window > body {
        margin: auto;
        width: calc(var(--paperwidth) * 1rem);
        height: calc(var(--paperheight) * 1rem);
    }
}

/********** setting fit-window root font-size **********/

@media screen and (max-width: 23cm) and (max-aspect-ratio: 230/317) {
    /* hardcoded, maybe better with scss or sass to calculate at build-time
       max-width = width + 1cm margin each side
       aspect ratio = (width+margin)/(height+margin)
       font-size for rem-scaling = 91vw = 21cm/23cm (--paperwidth / (--paperwidth + horizontal-margin))
    */
    html.fit-window {
      font-size: calc(91.304vw / var(--paperwidth));
    }
}

@media screen and (max-height: 31.7cm) and (min-aspect-ratio: 230/317) {
    /* hardcoded, explaination see above */
    html.fit-window {
      font-size: calc(93.690vh / var(--paperheight));
    }
}

/********** print page setup **********/

@page {
    size: A4 portrait;
    margin: 0;
}

/********** page elements **********/

/*header {
    display: flex;
    flex-direction: column; if infoblock not float, but flexbox is strange too
}*/

header::after {
    content: "";
    display: block;
    clear: both;
}

address.sender {
    /* NOTE:
    actual size of both adress fields combined is 90mm x 45mm,
    but positioning it correctly and adding padding-left: 5mm; would result
    in focus-explanations being positioned wrong. */
    position: absolute;
    top: 2.7rem;
    width: 8rem;
    height: 0.5rem;
    line-height: 0.5rem;
    font-size: 0.7em;
    font-style: normal;
}

address.recipient {
    position: absolute;
    top: calc(2.7rem + 0.5rem);
    width: 8rem;
    height: 4rem;
    font-style: normal;
}

aside {
    max-width: 7.5rem;
    min-width: 2rem;
    min-height: 4rem;
    margin-top: 0.7rem; /* 32mm - 25mm */
    margin-right: -1rem;
    /*align-self: flex-end;*/ /* if infoblock not float, but flexbox is strange too */
    float: right;
}

section.date {
    position: relative; /* for explanation to be correctly positioned */
    text-align: right;
    margin: 0.67em 0;
}

h1 {
    font-size: inherit;
    color: gray;
}

section.attachments h2 {
    margin-bottom: 0;
    font-size: 1em;
}

section.attachments ul {
    list-style: none;
    margin: 0;
    margin-left: 0.5em;
    padding: 0;
}

/********** folding marks and punching-holes center-mark **********/

.mark-paper-center {
    position: absolute;
    top: calc(var(--paperheight) * 1rem / 2 - 0.5pt);
    left: 0;
    width: 0.8rem;
    height: 1pt;
    background-color: gray;
}

.mark-paper-folds {
    position: absolute;
    top: 8.7rem;
    left: 0;
    width: 0.8rem;
    height: 10.5rem;
    border-top: 1pt solid gray;
    border-bottom: 1pt solid gray;
}

/********** helper classes **********/

.hidden {
    display: none;
}

.align-right {
    text-align: right;
}

.align-justify {
    text-align: justify;
}

/********** top menu switches **********/

.menu {
    position: fixed;
    left: 10%;
    right: 10%;
    top: 0;
    max-width: 600px;
    margin: auto;
    padding: 4px;
    background-color: rgba(0, 0, 0, 0.5);
    font-size: 14px;
    border-radius: 0 0 12px 12px;
    opacity: 0.7;
    transition: opacity .2s ease-out;
    transition-delay: 1.5s;
    --button-height: 28px;
    --button-checkbox-padding: 4px;
}

.menu:hover {
    opacity: 1;
    transition-delay: 0s;
}

.menu > label,
.menu > button {
    border: none;
    display: inline-block;
    position: relative;
    height: var(--button-height);
    line-height: var(--button-height);
    margin: 4px;
    padding: 0 8px;
    background-color: rgba(255, 255, 255, 0.8);
    cursor: pointer;
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    transition: background-color .2s ease-out;
    border-radius: 8px;
    font-family: inherit;
    font-size: inherit;
    outline: none;
}

.menu > label {
    padding-left: var(--button-height);
}

.menu > label:active,
.menu > button:active {
    background-color: rgba(255, 255, 255, 0.6);
}

.menu > label input[type=checkbox] {
    /*display: none;*/
    position: absolute;
    opacity: 0;
    cursor: pointer;
}

/* Create a custom checkbox */
.menu > label .checkmark {
    position: absolute;
    top: var(--button-checkbox-padding);
    left: var(--button-checkbox-padding);
    width: calc(var(--button-height) - 2 * var(--button-checkbox-padding));
    height: calc(var(--button-height) - 2 * var(--button-checkbox-padding));
    background-color: rgba(0, 0, 0, 0.1);
    border-radius: 4px;
}

/* When the checkbox is checked, add a darker background */
.menu > label input:checked ~ .checkmark {
    background-color: rgba(0, 0, 0, 0.2);
}

/* Create the checkmark */
.menu > label .checkmark:after {
    content: "";
    position: absolute;
    display: block;
    opacity: 0;
    transition: opacity .2s ease-out,
                transform .2s ease-out;
    /* checkmark styling */
    border: solid #333;
    border-width: 0 3px 3px 0;
    /* checkmark positioning */
    left: 6px;
    /* left: 30%; */
    top: 2px;
    /* top: 15%; */
    width: 5px;
    /* width: 25%; */
    height: 10px;
    /* height: 45%; */
    -webkit-transform: rotate(-20deg) scale(1.4);
    -ms-transform: rotate(-20deg) scale(1.4);
    transform: rotate(-20deg) scale(1.4);
}

/* Show the checkmark when checked */
.menu > label input:checked ~ .checkmark:after {
    display: block;
    opacity: 1;
    /* rotate to default checkmark style when checked */
    -webkit-transform: rotate(45deg) scale(1);
    -ms-transform: rotate(45deg) scale(1);
    transform: rotate(45deg) scale(1);
}

.menu > .pull-right {
    float: right;
}

@media print {
    .menu {
        display: none;
    }
}

/********** switchable highlight editable fields **********/

@media screen {
    /* add .highlight-editable to body to highlight all editable fields */
    body.highlight-editable [contenteditable=true] {
        background-color: lightcyan;
    }
}

/********** highlight focused field **********/

body [contenteditable=true]:focus {
    --focus-highlight-color: lightyellow;
    background-color: var(--focus-highlight-color);
    outline: none;
}

/********** field explanation on focused fields **********/

[contenteditable=true][field-explanation]:focus::before {
    position: absolute;
    transform: translateX(-100%);
    padding: 0 0.5em;
    background-color: var(--focus-highlight-color);
    color: black;
    content: attr(field-explanation);
    font-style: normal;
    font-weight: normal;
    /*text-transform: uppercase;*/
    --separation-border: 1px solid gray;
    border-right: var(--separation-border);
}

[contenteditable=true][field-explanation].explanation-right:focus::before {
    right: 0;
    transform: translateX(100%);
    border-right: none;
    border-left: var(--separation-border);
}

[contenteditable=true][field-explanation].rotate-explanation:focus::before {
    transform: rotate(90deg);
    transform-origin: left top 0;
    border-right: none;
    border-top: var(--separation-border);
}
